{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiserverCertificate": {
      "metadata": {
        "description": "The AD Tenant Id"
      },
      "type": "string"
    },
    "apiserverPrivateKey": {
      "metadata": {},
      "type": "securestring"
    },
    "caCertificate": {
      "metadata": {},
      "type": "string"
    },
    "caPrivateKey": {
      "metadata": {},
      "type": "securestring"
    },
    "clientCertificate": {
      "metadata": {},
      "type": "string"
    },
    "clientPrivateKey": {
      "metadata": {},
      "type": "securestring"
    },
    "deploymentName": {
      "metadata": {
        "description": "name for deployment, must be unique, used as prefix"
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "metadata": {
        "description": "container spec for hyperkube"
      },
      "type": "string"
    },
    "kubernetesReleaseUrl": {
      "metadata": {
        "description": "release url for kubernetes tarball"
      },
      "type": "string"
    },
    "masterFqdn": {
      "metadata": {
        "description": "The fully qualified domain name for the master"
      },
      "type": "string"
    },
    "masterSize": {
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Instance size for the VMs"
      },
      "type": "string"
    },
    "nodeCount": {
      "defaultValue": 1,
      "metadata": {
        "description": "Number of node nodes to create in addition to the master"
      },
      "type": "int"
    },
    "nodeSize": {
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Instance size for the VMs"
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "string"
    },
    "servicePrincipalClientSecret": {
      "type": "string"
    },
    "sshPublicKeyData": {
      "metadata": {
        "description": "Public key for SSH authentication"
      },
      "type": "string"
    },
    "tenantId": {
      "metadata": {},
      "type": " string"
    },
    "username": {
      "defaultValue": "kube",
      "metadata": {
        "description": "Username to login to the VMs"
      },
      "type": "string"
    }
  },
  "resources": [
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageAccountName')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "6443-6443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('deploymentName'), '-pip-master')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[parameters('deploymentName')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('vnetName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetCidr')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('deploymentName'), '-pip-master')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('deploymentName'), '-nic-master')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('masterPrivateIp')]",
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat(parameters('deploymentName'), '-pip-master'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('deploymentName'), '-nic-master')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('vmNamePrefix'), 'master')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('masterSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('deploymentName'),'-nic-master'))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[parameters('username')]",
          "computername": "[concat(variables('vmNamePrefix'), 'master')]",
          "customData": "[variables('masterCloudConfig')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('vmNamePrefix'), 'master')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('storageContainerName'),'/',variables('vmNamePrefix'), 'master.vhd')]"
            }
          }
        }
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('azureApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'), 'master')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('vmNamePrefix'), 'node-scaleset')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(parameters('deploymentName'), '-node-nic')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(parameters('deploymentName'), '-node-ip')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName')), '/subnets/', variables('subnetName'))]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[parameters('username')]",
            "computerNamePrefix": "[concat(variables('vmNamePrefix'), 'node')]",
            "customData": "[variables('nodeCloudConfig')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshPublicKeyData')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSku')]",
              "version": "latest"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "[concat(variables('vmNamePrefix'), 'node-disk')]",
              "vhdContainers": [
                "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('storageContainerName'))]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[parameters('nodeCount')]",
        "name": "[parameters('nodeSize')]",
        "tier": "Standard"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    }
  ],
  "variables": {
    "azureApiVersion": "2015-05-01-preview",
    "kubeApiServiceIp": "10.3.0.1",
    "kubeDnsServiceIp": "10.3.0.10",
    "kubePodCidr": "10.2.0.0/16",
    "kubeServiceCidr": "10.3.0.0/24",
    "location": "[resourceGroup().location]",
    "masterCloudConfig": "[base64(concat('#cloud-config\n\n# [ [ [ var ] ] ]\n# { { { param } } }\n\nwrite_files:\n- path: \"/etc/kubernetes/azure/auth.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n        \"tenantId\": \"', parameters('tenantID'), '\",\n        \"subscriptionId\": \"', variables('subscriptionId'), '\",\n        \"resourceGroup\": \"[[[resourceGrou', parameters('kubernetesHyperkubeSpec'), ']\",\n        \"servicePrincipalClientId\": \"', parameters('servicePrincipalClientId'), '\",\n        \"servicePrincipalClientSecret\": \"', parameters('servicePrincipalClientSecret'), '\"\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ', parameters('caCertificate'), '\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ', parameters('apiserverCertificate'), '\n\n- path: \"/etc/kubernetes/certs/apiserver.key\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ', parameters('apiserverPrivateKey'), '\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ', parameters('clientCertificate'), '\n\n- path: \"/etc/kubernetes/certs/client.key\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ', parameters('clientPrivateKey'), '\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.pem\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: /etc/kubernetes/manifests/master/master.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"k8s-master\"\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-apiserver\"\n            image: \"', parameters('kubernetesHyperkubeSpec'), '\"\n            command: \n              - \"/hyperkube\"\n              - \"apiserver\"\n              - \"--address=0.0.0.0\"\n              - \"--allow-privileged\"\n              - \"--insecure-port=0\"\n              - \"--secure-port=6443\"\n              - \"--service-cluster-ip-range=', variables('kubeServiceCidr'), '\"\n              - \"--etcd-servers=http://127.0.0.1:4001\"\n              - \"--cluster-name=kubernetes\"\n              - \"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\"\n              - \"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--client-ca-file=/etc/kubernetes/certs/ca.crt\"\n              - \"--v=2\"\n            volumeMounts: \n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n          - name: \"kube-controller-manager\"\n            image: \"', parameters('kubernetesHyperkubeSpec'), '\"\n            command: \n              - \"/hyperkube\"\n              - \"controller-manager\"\n              - \"--kubeconfig=/var/lib/kube-controller-manager/kubeconfig\",\n              - \"--v=2\"\n            volumeMounts: \n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n          - name: \"kube-scheduler\"\n            image: \"', parameters('kubernetesHyperkubeSpec'), '\"\n            command:\n              - \"/hyperkube\"\n              - \"scheduler\"\n              - \"--kubeconfig=/var/lib/kube-scheduler/kubeconfig\"\n              - \"--v=2\"\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n          - name: \"kube-proxy\"\n            image: \"', parameters('kubernetesHyperkubeSpec'), '\"\n            command: \n              - \"/hyperkube\"\n              - \"proxy\"\n              - \"--kubeconfig=/var/lib/kubeproxy/kubeconfig\"\n              - \"--proxy-mode=iptables\"\n              - \"--v=2\"\n            securityContext:\n              privileged: true\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes: \n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\ncoreos:\n  etcd2:\n    advertise-client-urls: \"http://127.0.0.1:2379,http://', variables('masterPrivateIp'), ':2379,http://', parameters('masterFqdn'), ':2379\"\n    listen-client-urls: \"http://0.0.0.0:2379,http://0.0.0.0:4001\"\n  units:\n    - name: \"etcd2.service\"\n      command: \"start\"\n    - name: flanneld.service\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Service]\n            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config \"{ \\\"Network\\\": \\\"', variables('kubePodCidr'), '\\\" }\"\n      command: \"start\"\n    - name: \"docker.service\"\n      command: \"start\"\n    - name: \"kubelet.service\"\n      command: \"start\"\n      content: |\n        [Unit]\n        Description=Kubelet\n        Requires=docker.service\n        Requires=flanneld.service\n        After=docker.service\n        After=flanneld.service\n\n        [Service]\n        Restart=always\n        ExecStart=/usr/bin/docker run \\\n          --net=host \\\n          --privileged \\\n          -v /sys:/sys:ro \\\n          -v /var/run:/var/run:rw \\\n          -v /:/rootfs:ro \\\n          -v /dev:/dev \\\n          -v /var/lib/docker/:/var/lib/docker:ro \\\n          -v /etc/kubernetes/:/etc/kubernetes/:rw \\\n          -v /var/lib/kubelet/:/var/lib/kubelet:rw \\\n            ', parameters('kubernetesHyperkubeSpec'), ' \\\n              /hyperkube kubelet \\\n                --containerized \\\n                --api-servers=\"https://', parameters('masterFqdn'), ':6443\" \\\n                --kubeconfig=/var/lib/kubelet/kubeconfig \\\n                --address=0.0.0.0 \\\n                --allow-privileged=true \\\n                --enable-server \\\n                --config=/etc/kubernetes/manifests \\\n                --cluster-dns=', variables('kubeDnsServiceIP'), ' \\\n                --cluster-domain=cluster.local \\\n                --register-node=false \\\n                --v=2\n        ExecStop=/usr/bin/docker stop -t 2 kubelet\n'))]",
    "masterPrivateIp": "10.0.0.4",
    "nodeCloudConfig": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/etc/kubernetes/azure.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  encoding: \"base64\"\n  content: |\n    {{.ConfigFile}}\n\n- path: \"/etc/kubernetes/manifests/node-components.yaml\"\n  permissions: \"0644\"\n  owner: \"rootnode\n  content: |\n    {\n      \"apiVersion\": \"v1\",\n      \"kind\": \"Pod\",\n      \"metadata\": { \"name\": \"k8s-master\" },\n      \"spec\": {\n        \"hostNetwork\": true,\n        \"containers\": [\n          {\n            \"name\": \"kube-proxy\",\n            \"image\": \"{{.HyperkubeContainerSpec}}\",\n            \"command\": [\n              \"/hyperkube\",\n              \"proxy\",\n              \"--kubeconfig=/etc/kubernetes/node-proxy-kubeconfig\",\n              \"--proxy-mode=iptables\",\n              \"--v=2\"\n            ],\n            \"securityContext\": {\n              \"privileged\": true\n            },\n            \"volumeMounts\": [ { \"name\": \"etc-kubernetes\", \"mountPath\": \"/etc/kubernetes\" } ]\n          }\n        ],\n        \"volumes\": [ { \"name\": \"etc-kubernetes\", \"hostPath\": { \"path\": \"/etc/kubernetes\" } } ]\n      }\n    }\n\ncoreos:\n  flannel:\n    etcd_endpoints: \"http://{{.MasterIP}}:2379\"\n  units:\n    - name: \"docker.service\"\n      command: \"start\"\n    - name: flanneld.service\n      command: \"start\"\n    - name: \"kubelet.service\"\n      command: \"start\"\n      content: |\n        [Unit]\n        Description=Kubelet\n        Requires=docker.service\n        Requires=flanneld.service\n        Requires=ensure-secrets.service\n        After=docker.service\n        After=flanneld.service\n        After=ensure-secrets.service\n        \n        [Service]\n        Restart=always\n        ExecStart=/usr/bin/docker run \\\n                    --net=host \\\n                    --privileged \\\n                    -v /sys:/sys:ro \\\n                    -v /var/run:/var/run:rw \\\n                    -v /:/rootfs:ro \\\n                    -v /dev:/dev \\\n                    -v /var/lib/docker/:/var/lib/docker:ro \\\n                    -v /var/lib/kubelet/:/var/lib/kubelet:rw \\\n                    -v /etc/kubernetes:/etc/kubernetes:rw \\\n                    {{.HyperkubeContainerSpec}} \\\n                      /hyperkube kubelet \\\n                        --containerized \\\n                        --api-servers=https://{{.MasterFQDN}}:6443 \\\n                        --kubeconfig=/etc/kubernetes/node-kubelet-kubeconfig \\\n                        --address=0.0.0.0 \\\n                        --allow-privileged=true \\\n                        --enable-server \\\n                        --config=/etc/kubernetes/manifests \\\n                        --cluster-dns={{.Network.DnsServiceIP}} \\\n                        --cluster-domain=cluster.local \\\n                        --v=2\n        ExecStop=/usr/bin/docker stop -t 2 kubelet\n    - name: \"ensure-secrets.service\"\n      command: \"start\"\n      content: |\n        [Unit]\n        Description=Load kubeconfig files for the kube components\n        Before=kubelet.service\n        Requires=flanneld.service\n        Requires=docker.service\n        After=flanneld.service\n        After=docker.service\n        \n        [Service]\n        Restart=on-failure\n        ExecStart=/usr/bin/docker run \\\n          -v /etc/ssl:/etc/ssl \\\n          -v /usr/share/ca-certificates:/usr/share/ca-certificates \\\n          -v /etc/kubernetes:/etc/kubernetes \\\n          -v /var/lib/waagent:/var/lib/waagent \\\n          colemickens/azkube azkube certinstall --machineType=node\n'))]",
    "nsgName": "[concat(parameters('deploymentName'), '-nsg')]",
    "osImageOffer": "CoreOS",
    "osImagePublisher": "CoreOS",
    "osImageSKU": "Beta",
    "resourceGroup": "[resourceGroup().name]",
    "sshKeyPath": "[concat('/home/',parameters('username'),'/.ssh/authorized_keys')]",
    "storageAccountName": "[replace(concat(parameters('deploymentName'), 'strg'),'-','')]",
    "storageAccountType": "Standard_LRS",
    "storageContainerName": "kube-vm-disks",
    "subnetCidr": "10.0.0.0/24",
    "subnetName": "[concat(parameters('deploymentName'), '-subnet')]",
    "subnetRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnetName'))]",
    "subscriptionId": "[subscription().id]",
    "vmNamePrefix": "[concat(parameters('deploymentName'), '-vm')]",
    "vnetCidr": "10.0.0.0/8",
    "vnetName": "[concat(parameters('deploymentName'), '-vnet')]",
    "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]"
  }
}