{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "masterVmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "Instance size for the VMs"
      }
    },
    "minionVmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "Instance size for the VMs"
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of minion nodes to create in addition to the master"
      }
    },
    "username": {
      "type": "string",
      "defaultValue": "azkube",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "masterFqdn": {
      "type": "string",
      "metadata": {
        "description": "The fully qualified domain name for the master"
      }
    },
    "sshPublicKeyData": {
      "type": "string",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "hyperkubeContainer": {
      "type": "string",
      "metadata": {
        "description": "container spec for hyperkube"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "The AD Tenant Id"
      }
    },
    "appUrl": {
      "type": "string",
      "metadata": {
        "description": "The AD Tenant Id"
      }
    },
    "servicePrincipalObjectId": {
      "type": "string",
      "metadata": {
        "description": "The AD Tenant Id"
      }
    },
    "servicePrincipalFingerprint": {
      "type": "string",
      "metadata": {
        "description": "The AD Tenant Id"
      }
    },
    "vaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure KeyVault"
      }
    },
    "servicePrincipalSecretUrl": {
      "type": "string",
      "metadata": {
        "description": "The secret url (must be versioned)"
      }
    }
  },
  "variables": {
    "azureApiVersion": "2015-05-01-preview",

    "vmNamePrefix": "kube-",
    "osImagePublisher": "CoreOS",
    "osImageOffer": "CoreOS",
    "osImageSKU": "Beta",

    "nsgName": "nsg",
    "vnetName": "vnet",
    "vnetCidr": "10.0.0.0/8",
    "subnetName": "subnet1",
    "subnetCidr": "10.0.0.0/24",
    "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "subnetRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnetName'))]",
    
    "podCidr": "10.2.0.0/16",
    "serviceCidr": "10.3.0.0/24",

    "masterPrivateIp": "10.0.0.4",
    "apiServiceIp": "10.3.0.1",
    "dnsServiceIp": "10.3.0.10",

    "storageAccountName": "[replace(concat(resourceGroup().name, 'storage'),'-','')]",
    "storageContainerName": "kube-vm-disks",
    "storageAccountType": "Standard_LRS",
    
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "masterCloudConfig": "{{MASTER_CLOUDCONFIG}}",
    "nodeCloudConfig": "{{NODE_CLOUDCONFIG}}",

    "etcdVersion": "2.2.1",
    "flannelVersion": "0.5.3",
    "kube2skyVersion": "1.11",
    "skydnsVersion": "2015-10-13-8c72f8c"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_ssh",
            "properties": {
              "description": "Allow SSH traffic to master",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22-22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "description": "Allow kube-apiserver (tls) traffic to master",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6443-6443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "pip-master",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(resourceGroup().name, '-master')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetCidr')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "nic-master",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', 'pip-master')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "privateIPAddress": "[variables('masterPrivateIp')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', 'pip-master')]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "[concat(variables('vmNamePrefix'), 'master')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'nic-master')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('masterVmSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('vmNamePrefix'), 'master')]",
          "adminUsername": "[parameters('adminUsername')]",
          "customData": "[variables('masterCloudConfig')]",
          "secrets": [
            {
              "sourceVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
              },
              "vaultCertificates": [
                {
                  "certificateUrl": "[parameters('servicePrincipalSecretUrl')]"
                }
              ]
            }
          ],
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshPublicKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNamePrefix'), 'master')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('storageContainerName'),'/',variables('vmNamePrefix'), 'master.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','nic-master')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "[variables('azureApiVersion')]",
      "name": "[concat(variables('vmNamePrefix'), 'minion-scaleset')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'), 'master')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "sku": {
        "name": "[parameters('nodeVmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('nodeCount')]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[concat(variables('vmNamePrefix'), 'minion')]",
            "adminUsername": "[parameters('username')]",
            "customData": "[variables('nodeCloudConfig')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                },
                "vaultCertificates": [
                  {
                    "certificateUrl": "[parameters('servicePrincipalSecretUrl')]"
                  }
                ]
              }
            ],
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshPublicKeyData')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('osImagePublisher')]",
              "offer": "[variables('osImageOffer')]",
              "sku": "[variables('osImageSku')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat(variables('vmNamePrefix'), 'minion-disk')]",
              "vhdContainers": [
                "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('storageContainerName'))]"
              ],
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
            {
                "name": "minion-nic",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "minion-ip",
                      "properties": {
                        "subnet": {
                          "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName')), '/subnets/', variables('subnetName'))]"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  ]
}
